비즈니스 모델링

유스케이스 모델
starUML 사용

객체 모델 (나중에 한다)


요구사항 정의서

외부적 관점(비즈니스 유스케이스 모델) -> 시스템 <- 내부적 관점(비즈니스 객체모델)


1. 비즈니스 모델링

- 비즈니스 유스케이스 모델 : 시스템을 외부와의 관계에서 바라봄. 그 시스템을 이용하는 관점.

- 비즈니스 객체 모델

2. Use-case

starUML -> 버전이 다르면 합쳐지지 않을 수도 있다. 팀원끼리 버전 통일

3. 요구사항 Matrix (추적표) -> 매우 중요하다.

기능 명세

기능 요구사항, 비기능 요구사항

창프 기능 목록과 비슷하다.

4. 회의록 작성

회의록을 누가 어떻게 무엇을 하였는지 정확하게 작성

-

유스케이스 다이어그램

시작부터 끝까지가 하나로 완료되는 하나의 중요 기능

유스케이스는 반드시 액터에게 어떤 가치를 제공해주어야 한다.

-주액터 : 기능을 요구하는 대상, 시스템이 정보를 제공하는 대상 ex) 사용자
-부액터 : 사용자 액터가 사용한 유스케이스를 처리해주는 외부의 시스템.

유스케이스 작성단계

1. 행위자 식별
2. 유스케이스 식별
3. 관계 정의
4. 유스케이스 구조화

분석 클래스 다이어그램 -> 다음주 예정

-

요구사항 정의 -> 요구사항 분석

정의때도 유스케이스를 썼는데, 분석 때도 유스케이스를 써야하나?

분석때는 정의때 쓴 유스케이스를 확인하고 어떻게 실현하는지 분석하는 단계

객체지향 방법론

정보 관점 : 객체(특성, 객체들 사이의 관계)

동적 관점 : 객체들의 행위, 상태(생명주기)

기능 관점 : 동작

이러한 3가지 관점을 유스케이스로 통합해서 나타냄

사용자 액터 : 개발될 시스템을 사용하는 사람

시스템 액터 : 시스템과 상호작용을 하는 시스템

- 요구사항 분석

1. 유스케이스

기능 모델링 -> 시스템에 의해 제공되는 기능

2. 유스케이스 시나리오

동적 모델링, 정보 모델링

행위자 <->시스템

사건흐름, 과정(동적 모델링)
주고받는 정보(정보 모델링)


-> 반드시 고객의 입장에서 기술.

3. 과정

정보		   클래스		이벤트
->클래스다이어그램 -> 시퀀스 다이어그램 -> 액티비티 다이어그램
클래스
클래스들 사이의 관계
클래스의 속성

4. 유스케이스

유스케이스 다이어 그램

화살표 방향을 잘 파악할 것.

화살표의 의도는 정보교환이 아니라 의사소통

콜라보레이션 : 유스케이스를 해석한 다이어그램의 집합 -> Java의 인터페이스로 이해

유스케이스를 잘 이해하여야함.

유스케이스를 세분화 하지말고 통합해야함

ex) 등록,수정,삭제,조회의 경우, 세분화 하지말고 통합해라.

CRUD는 하나의 유스케이스다

각각의 유스케이스 별로 기능을 세분화 한 조가 있는데 이런짓 하지마라.

5. 액티비티 다이어그램

둥근 : 둥근 것 안에 있는 것이 액티비티

다이아몬드 : 분기점

6. 시퀀스 다이어그램

분석 단계의 시퀀스 다이어그램은 유스케이스에 도출할 수 있는 것만으로 기입하면 된다.
어떻게가 아니라 무엇을에 초점

7. 클래스 다이어그램

시스템의 정적인 정보 구조를 나타내는 정보 모델
시스템에 필요한 클래스와 관계를 나타냄

컨트롤 클래스 -> 연산을 수행, 값을 넘겨준다
바운더리 클래스 -> view class, UI
엔티티 클래스 -> 주변환경에 독립적, 오래 유지될 정보, DB에 저장될 정보

분석 클래스

- Control Class
하나의 유스케이스당 하나의 제어 클래스
기능에 따라 여러개로 분할 하거나 하나로 병합

- Entity Class
도메인 모델
용어집
유스케이스 시나리오 - 명사추출법

- Boundary Class

UP 방법론의 경우 프로토타입이 정제되어 변경될 수 있다.

ex) 회원 Entity의 경우, 일반회원, 우수회원으로 나눌 수도 있는데 유스케이스가 다 바뀌는 상황에서 그것도 고려하여 다 바꿔줘야하는지?
UP 방법론에 따라서 나눌 수 있다.

시퀀스 다이어그램

시나리오에 따라서 이벤트 흐름이 변경된다.

액티비티 다이어그램